#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jun  9 21:17:14 2023

@author: vijay
"""

import matplotlib.pyplot as plt
import numpy as np
from skimage.io import imread
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
import seaborn as sns

# Initialization of variables
images=[]
imageT=[]
ylabelT=[]
imaged=[]
labl=[]
img=[]

# Number of flower from each group are going to be trained, so total 78 flowers
sample_no=40 
Damask_Rose=np.zeros(sample_no-1)
Rain_Lily=np.ones(sample_no-1)
labels=np.concatenate((Damask_Rose,Rain_Lily))

# Reading the flower dataset 1.Damask Rose & 2.Rain Lily- For Training
for i in range(1,sample_no):
    
    imge=imread('/home/vijay/Documents/Py Prog/flower/Ornamental Plants/train/Damask Rose/Damask Rose (%1d).jpeg'%i)
    imagef = imge.reshape(1,-1)
    imagef=imagef[0]
    images.append(imagef)
    labl.append(0)

for j in range(1,sample_no):
    imge=imread('/home/vijay/Documents/Py Prog/flower/Ornamental Plants/train/Rain Lily/Rain Lily (%1d).jpeg'%j)
    imagef = imge.reshape(1,-1)
    imagef=imagef[0]
    images.append(imagef)
    labl.append(1)


# Reading the flower dataset 1.Damask Rose & 2.Rain Lily- For Testing
for k in range(sample_no+5,sample_no+50):
    imge=imread('/home/vijay/Documents/Py Prog/flower/Damask Rose/Damask Rose (%1d).jpeg'%k)    
    img.append(imge)
    imagef = imge.reshape(1,-1)
    imagef=imagef[0]
    imageT.append(imagef)
    ylabelT.append(0)
    
    imge=imread('/home/vijay/Documents/Py Prog/flower/Rain Lily/Rain Lily (%1d).jpeg'%k)
    img.append(imge)
    imagef = imge.reshape(1,-1)
    imagef=imagef[0]
    imageT.append(imagef)
    ylabelT.append(1)

# Spliting the dataset
X_train,X_test,y_train,y_test=train_test_split(images,labl,test_size=0.1,shuffle=True,random_state=42)

# Train the models with train data
mdl=SVC()
mdlk=KNeighborsClassifier()
mdld=DecisionTreeClassifier()

mdl.fit(X_train,y_train)
mdlk.fit(X_train,y_train)
mdld.fit(X_train,y_train)

# Predicting the flower using test data Not from train_test_split
y_pred=mdl.predict(imageT)
y_predk=mdlk.predict(imageT)
y_predd=mdld.predict(imageT)

# Calculating the Accuracy score
ac_svm=accuracy_score(ylabelT,y_pred).round(3)
ac_knn=accuracy_score(ylabelT,y_predk).round(3)
ac_tree=accuracy_score(ylabelT,y_predd).round(3)

print('____________________________________________________________')
print('*****************  ACCURACY SCORE  ************************')
print('____________________________________________________________')
print('\n SVM Classifier     = ',ac_svm)
print('\n KNearestNeighbor   = ',ac_knn)
print('\n Decisiontree       = ',ac_tree)
print('===========================================================')

# Finding the best Classifier
if (ac_svm>ac_knn) & (ac_svm>ac_tree):
    print('\n                             The best Classifier is SVM \n')
elif ac_knn>ac_tree:
    print('\n                The Best Classifier is Knearestneighbor \n')
else:
    print('\n                   The Best Classifier is DecissionTree \n')
print('===========================================================')

# Displaying the Test datasets
for k in range(1,len(imageT)):
    plt.imshow(img[k])
    plt.show()

# Calculating Confusion Matrix
con_fs=metrics.confusion_matrix(ylabelT,y_pred)
con_fk=metrics.confusion_matrix(ylabelT,y_predk)
con_ft=metrics.confusion_matrix(ylabelT,y_predd)

# Plot confusion Matrix
fig, ax = plt.subplots(1, 3, figsize=(20,10))
ax[0].set_title("SVM")
ax[1].set_title("KNN")
ax[2].set_title("DecisionTree")

metrics.ConfusionMatrixDisplay(
    confusion_matrix=metrics.confusion_matrix(ylabelT, y_pred), 
    display_labels=[False, True]).plot(ax=ax[0])

metrics.ConfusionMatrixDisplay(
    confusion_matrix=metrics.confusion_matrix(ylabelT, y_predk), 
    display_labels=[False, True]).plot(ax=ax[1])

metrics.ConfusionMatrixDisplay(
    confusion_matrix=metrics.confusion_matrix(ylabelT, y_predd), 
    display_labels=[False, True]).plot(ax=ax[2])
